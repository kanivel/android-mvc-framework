#summary ver0.1の全体アーキテクチャと設計パターンを俯瞰（図表つき）

<br>

= ver0.1 / 全体のアーキテクチャと設計 =


本フレームワークの，現時点での全体アーキテクチャ。

<br>
<hr>

== フレームワークの全体像 ==

設計の概要を以下に示す。

 * フレームワークの基本構造として，<b>MVCパターン</b>を採用している。

 * 各レイヤ内では，各種の<b>デザインパターン</b>を採用している。

 * その他，可能な限り<b>デファクトスタンダード</b>な手法を盛り込んでいる。
   * したがって，習得しやすく，利用しやすく，メンテナンスしやすい。

 * しかし同時に<b>「モダンな発想」</b>を意欲的に取り入れている。
   * したがって，<b>スピーディーで柔軟なAndroidアプリ開発</b>が可能になる。

<br>

設計の全体像を要約した簡易クラス図は，下記の通り。

http://android-mvc-framework.googlecode.com/files/ver0.1%E3%82%AF%E3%83%A9%E3%82%B9%E6%A6%82%E8%A6%81.png

※「Downloads」タブより，この図の原本をダウンロードできる。
<br>

この図の見方：

 * 図の下部で，７割ほどのエリアを占めているのが，本フレームワークのコア・ライブラリである。

 * 図の上部で，３割ほどのエリアを占めているのが，フレームワークを利用して開発されるユーザ側アプリである。

 * 本フレームワークが相当な厚みの下部レイヤをカバーしているので，上位層を実装するユーザの負担が，かなり軽減される。　…という点が伝わるはずだ。

 * フレームワーク層にも，ユーザアプリ層にも，M・V・Cの分割が施されている。左から順に，V(iew)，C(ontroller)，M(odel) である。


<br>
<br>


次いで，M・V・Cの各層の特徴的な機能について，さらっとフィーチャーしておく。
<br>
<br>

まずView層では，<b>「jQueryスタイルの，エレガントでスピーディーなコーディング」</b>が可能である。

クラスとしては，UIBuilderあたりが担当している。

この機能の詳細については，サンプルアプリケーションを参照。

また，この機能の試作品については，下記のページを参照。

 Androidアプリの画面レイアウトを，まるでjQueryのようなコードで動的構築できるライブラリ　（の試作品。UIコーディングのためのDSL）<br>
 http://d.hatena.ne.jp/language_and_engineering/20120210/p1

<br>

さらにView層では，<b>レイアウトXMLの指定をする必要がない</b>。

もしXMLが存在する場合，Activityのクラス名から，対応するXMLをommonActivityUtilが自動的に判断して描画する。

そのユーティリティクラスを参照するために，Activityの基底クラスの継承関係に工夫を凝らしてある。

この機能の試作品については，下記のページを参照。

 Androidアプリで，レイアウト用XMLの名前をいちいち指定せずに，自動的に画面を描画させよう　（Rails風のCoCなレンダリング）<br>
 http://d.hatena.ne.jp/language_and_engineering/20110910/p1

<br>
<br>

次にController層であるが，コントローラクラスの導入によって，<b>画面遷移などの制御に関する情報が集約された</b>。

おかげで，アプリ全体の制御フローに関する記述が分散せずに，メンテナンス性やテスタビリティが向上する。

この機能の試作品については，下記のページを参照。

 AndroidアプリにStrutsのようなコントローラを導入し，画面制御させるサンプルコード　（の試作品。バリデーションやビジネスロジックの骨組み）<br>
 http://d.hatena.ne.jp/language_and_engineering/20120213/p1

<br>
<br>

さらに，C層やM層を横断して，本フレームワーク全体を支える存在となっているのが<b>非同期タスクの逐次実行ライブラリ</b>である。

Androidアプリの最大の恥である「ANRダイアログ」が出ないように，DB参照などの重い処理は，UIとは別のスレッドで行なう必要がある。

こういった非同期タスクをたくさん扱う必要がある場合，処理のフローが追いづらくなるが，これはタスクを逐次実行させれば問題を回避できる。

図中では，AsyncTasksRunnerあたりが担当している。この
クラスは，本フレームワークで最下層に位置する要であり，縁の下の力持ちである。

この機能の試作品については，下記のページを参照。

 Javaの非同期処理を，シングルスレッドのようにシンプルにコーディングするための設計パターン　（並列処理を逐次処理にする）<br>
 http://d.hatena.ne.jp/language_and_engineering/20120205/p1

<br>
<br>

このような非同期処理の枠組みがあれば，<b>HTTP通信のタスク</b>は楽々動作する。

図中では，HTTPPostTaskが該当する。

この機能の試作品については，下記のページを参照。

 Androidアプリで，HTTP通信のPOSTリクエストをする汎用クラス （文字化け無し＋非同期タスク）<br>
 http://d.hatena.ne.jp/language_and_engineering/20111121/p1

<br>
<br>

次に，Model層では，<b>SQLiteに特化したORマッピングの方法論</b>を考案している。

SQLiteには型が少ないので，素の値をJavaで扱おうとすると非常にめんどい事になるから，工夫しているのだ。

例えばJavaでBooleanの「論理値」であるフィールドは，SQLiteでは「integer」として実装する必要が生じる。

その橋渡しをしているのが，この図のLogicalEntityとPhysicalEntityだ。

詳細はサンプルアプリケーションを参照のこと。

<br>
<br>

さらに，<b>アプリのインストール時の処理フロー</b>が一般化されており，DBを初期化する際の仕組みも整っている。

これは，InstallAppActivityあたりが担当している。

またDBを初期化するにあたって，Ruby on Railsのような<b>マイグレーション風の記述によって，テーブルを構築</b>する事が可能である。

これはSchemaDefinitionが担当している。

詳細はサンプルアプリケーションを参照のこと。

よくコードを追ってみると，アプリ初期化判定部分で下記のページの仕組みが応用されている事に気づくだろう。

 AndroidアプリのSQLiteで，データベースの存在を判定する方法　（ローカルファイルにデータを永続化させる場合の，事前チェック処理）
 http://d.hatena.ne.jp/language_and_engineering/20111202/p1

<br>
<br>

ここまででM・V・Cを横断したが，全てにおいて必要になるのが，<b>詳しいログ出力</b>である。

本フレームワークのデバッグログは，呼び出し元のクラス名とメソッド名が自動的に付与されて出力される。

これはBaseUtilが受け持っている。

この機能の試作品については，下記のページを参照。

 制御しやすい「デバッグ用ロガー」を自作して，サクサク開発 （Javaで，メソッド名を含めログ出力する方法のサンプル）<br>
 http://d.hatena.ne.jp/language_and_engineering/20120209/p1

<br>
<br>

機能はまだまだあるが，解説は以上とする。

理由は下記の通り。

 * サンプルのソースと，上記で引用したページの内容をよく読めば，十分理解できるから。

 * 今後のバージョンアップで，どんどん機能が進歩してゆくから。

<br>

<br>
<hr>

== クラスパッケージ ==

本フレームワーク内のJavaパッケージ構造を以下に示す。

なお，ver0.1の段階では未実装のパッケージも含まれる。


<pre>
com
└─android_mvc
    ├─framework              : フレームワークのルート。-------------- ↓ここからフレームワーク↓ --------------
    │  ├─activities
    │  │  └─installation   : アプリのインストール処理の基底
    │  │          
    │  ├─annotations        : FW側のアノテーション
    │  │      
    │  ├─bat                : Service関連
    │  │      
    │  ├─common             : FW内の共通処理ユーティリティ
    │  │      
    │  ├─controller         : FW側のC層の基底
    │  │      
    │  ├─db                 : 永続化レイヤ関連の基底。RDBおよびプリファレンス
    │  │  │  
    │  │  ├─dao            : データソースに接続するためのインタフェースの基底
    │  │  │      
    │  │  ├─entity         : エンティティの基底
    │  │  │      
    │  │  ├─schema         : スキーマ定義のユーティリティ
    │  │  │      
    │  │  └─transaction    : トランザクション管理ユーティリティ
    │  │          
    │  ├─map                : MapView利用のユーティリティ
    │  │      
    │  ├─net                : NW通信のユーティリティ
    │  │      
    │  ├─task               : 非同期タスクのユーティリティ
    │  │      
    │  └─ui                 : UIのユーティリティ
    │      │  
    │      └─view           : FW内の独自拡張View
    │
    │     ----------------------------------------------------------- ↑ここまでフレームワーク↑ --------------
    │
    └─sample_project -------------↓ここからは，フレームワークを利用した個別のアプリケーション↓--------------
        ├─activities
        │  ├─func_db        : 機能名ごとにactivitiesパッケージ内を分割する。
        │  │      
        │  ├─installation   : アプリのインストール処理関連
        │  │  │  
        │  │  └─lib
        │  │          
        │  └─main           : ここではトップ画面関連
        │          
        ├─annotations        : ユーザ定義アノテーション
        │      
        ├─bat                : Serviceの実装
        │      
        ├─common             : ユーザ定義の共通処理
        │      
        ├─controller         : C層の実装
        │      
        ├─db                 : 永続化レイヤの実装
        │  ├─dao            : DAOの実装
        │  │          
        │  ├─entity         : 論理エンティティの実装
        │  │  │  
        │  │  └─lib
        │  │          
        │  └─schema         : RDBのスキーマ定義
        │          
        └─domain             : ビジネスロジックの実装

           --------------------------------------------------- ↑ここまでが個別アプリケーション↑ --------------

</pre>


ネーミングとしては，フレームワーク側とユーザ定義アプリ側で，接頭辞などを下記のように使い分けている。

 * フレームワーク側：
   * 「FW」
   * 「Base」
   * 「I」「Abstract」

 * ユーザ定義アプリ側：
   * 「AP」


<br>
<hr>

== 今後 ==

本フレームワークの設計は，ver0.2以降においても改良を重ねてゆく。



　