#summary ver0.1の全体アーキテクチャと設計パターンを俯瞰（図表つき）

<br>

= ver0.1 / 全体のアーキテクチャと設計 =


本フレームワークの，現時点での全体アーキテクチャ。

<br>
<hr>

== フレームワークの全体像 ==

設計の概要を以下に示す。

 * フレームワークの基本構造として，<b>MVCパターン</b>を採用している。

 * 各レイヤ内では，各種の<b>デザインパターン</b>を採用している。

 * その他，可能な限り<b>デファクトスタンダード</b>な手法を盛り込んでいる。
   * したがって，習得しやすく，利用しやすく，メンテナンスしやすい。

 * しかし同時に<b>「モダンな発想」</b>を意欲的に取り入れている。
   * したがって，<b>スピーディーで柔軟なAndroidアプリ開発</b>が可能になる。

<br>

設計の全体像を要約した簡易クラス図は，下記の通り。

http://android-mvc-framework.googlecode.com/files/ver0.1%E3%82%AF%E3%83%A9%E3%82%B9%E6%A6%82%E8%A6%81.png

この図の見方：

 * 図の下部で，７割ほどのエリアを占めているのが，本フレームワークのコア・ライブラリである。

 * 図の上部で，３割ほどのエリアを占めているのが，フレームワークを利用して開発されるユーザ側アプリである。

 * 本フレームワークが相当な厚みの下部レイヤをカバーしているので，上位層を実装するユーザの負担が，かなり軽減される。　…という点が伝わるはずだ。

 * フレームワーク層にも，ユーザアプリ層にも，M・V・Cの分割が施されている。左から順に，V(iew)，C(ontroller)，M(odel) である。


<br>
<br>


次いで，M・V・Cの各層の特徴的な機能について，さらっとフィーチャーしておく。
<br>

まずView層では，<b>「jQueryスタイルの，エレガントでスピーディーなコーディング」</b>が可能である。

クラスとしては，UIBuilderあたりが担当している。

この機能の詳細については，サンプルアプリケーションを参照。

また，この機能の試作品については，下記のページを参照。

 Androidアプリの画面レイアウトを，まるでjQueryのようなコードで動的構築できるライブラリ　（の試作品。UIコーディングのためのDSL）<br>
 http://d.hatena.ne.jp/language_and_engineering/20120210/p1

<br>

さらにView層では，レイアウトXMLの指定をする必要がない。

もしXMLが存在する場合，Activityのクラス名から，対応するXMLをommonActivityUtilが自動的に判断して描画する。

そのユーティリティクラスを参照するために，Activityの基底クラスの継承関係に工夫を凝らしてある。

この機能の試作品については，下記のページを参照。

 Androidアプリで，レイアウト用XMLの名前をいちいち指定せずに，自動的に画面を描画させよう　（Rails風のCoCなレンダリング）
 http://d.hatena.ne.jp/language_and_engineering/20110910/p1

<br>
<br>


<br>
<hr>

== クラスパッケージ ==

本フレームワーク内のJavaパッケージ構造を以下に示す。

なお，ver0.1の段階では未実装のパッケージも含まれる。


<pre>
com
└─android_mvc
    ├─framework              : フレームワークのルート。-------------- ↓ここからフレームワーク↓ --------------
    │  ├─activities
    │  │  └─installation   : アプリのインストール処理の基底
    │  │          
    │  ├─annotations        : FW側のアノテーション
    │  │      
    │  ├─bat                : Service関連
    │  │      
    │  ├─common             : FW内の共通処理ユーティリティ
    │  │      
    │  ├─controller         : FW側のC層の基底
    │  │      
    │  ├─db                 : 永続化レイヤ関連の基底。RDBおよびプリファレンス
    │  │  │  
    │  │  ├─dao            : データソースに接続するためのインタフェースの基底
    │  │  │      
    │  │  ├─entity         : エンティティの基底
    │  │  │      
    │  │  ├─schema         : スキーマ定義のユーティリティ
    │  │  │      
    │  │  └─transaction    : トランザクション管理ユーティリティ
    │  │          
    │  ├─map                : MapView利用のユーティリティ
    │  │      
    │  ├─net                : NW通信のユーティリティ
    │  │      
    │  ├─task               : 非同期タスクのユーティリティ
    │  │      
    │  └─ui                 : UIのユーティリティ
    │      │  
    │      └─view           : FW内の独自拡張View
    │
    │     ----------------------------------------------------------- ↑ここまでフレームワーク↑ --------------
    │
    └─sample_project -------------↓ここからは，フレームワークを利用した個別のアプリケーション↓--------------
        ├─activities
        │  ├─func_db        : 機能名ごとにactivitiesパッケージ内を分割する。
        │  │      
        │  ├─installation   : アプリのインストール処理関連
        │  │  │  
        │  │  └─lib
        │  │          
        │  └─main           : ここではトップ画面関連
        │          
        ├─annotations        : ユーザ定義アノテーション
        │      
        ├─bat                : Serviceの実装
        │      
        ├─common             : ユーザ定義の共通処理
        │      
        ├─controller         : C層の実装
        │      
        ├─db                 : 永続化レイヤの実装
        │  ├─dao            : DAOの実装
        │  │          
        │  ├─entity         : 論理エンティティの実装
        │  │  │  
        │  │  └─lib
        │  │          
        │  └─schema         : RDBのスキーマ定義
        │          
        └─domain             : ビジネスロジックの実装

           --------------------------------------------------- ↑ここまでが個別アプリケーション↑ --------------

</pre>


ネーミングとしては，フレームワーク側とユーザ定義アプリ側で，接頭辞などを下記のように使い分けている。

 * フレームワーク側：
   * 「FW」
   * 「Base」
   * 「I」「Abstract」

 * ユーザ定義アプリ側：
   * 「AP」


<br>
<hr>

== 今後 ==

本フレームワークの設計は，ver0.2以降においても改良を重ねてゆく。



　